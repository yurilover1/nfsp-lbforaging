import os
import argparse
import numpy as np
import matplotlib.pyplot as plt
import gymnasium as gym
import lbforaging  # noqa
import torch

from lbforaging.agents import NFSPAgent, RandomAgent, AveragePolicy
from lbforaging.agents.utils import action_mask

def evaluate_model_series(env, model_paths, state_size, action_size, num_episodes=100):
    """
    评估一系列模型的可利用度变化趋势
    
    参数:
        env: 游戏环境
        model_paths: 模型路径列表或父目录
        state_size: 状态空间大小
        action_size: 动作空间大小
        num_episodes: 每个模型评估的回合数
    
    返回:
        包含每个模型可利用度和平均奖励的字典
    """
    results = {
        'model_names': [],
        'exploitability': [],
        'avg_reward': []
    }
    
    # 如果model_paths是目录路径，获取其中所有子目录
    if os.path.isdir(model_paths) and not os.path.isfile(os.path.join(model_paths, "nfsp_agent_0_q_network.pth")):
        # 获取所有可能的模型目录
        subdirs = [d for d in os.listdir(model_paths) if os.path.isdir(os.path.join(model_paths, d))]
        model_dirs = [os.path.join(model_paths, d) for d in subdirs]
    else:
        # 如果是单个模型目录或模型路径列表
        model_dirs = [model_paths] if isinstance(model_paths, str) else model_paths
    
    print(f"找到以下模型目录进行评估：{model_dirs}")
    
    # 评估每个模型
    for model_dir in sorted(model_dirs):
        # 创建NFSP智能体
        nfsp_agents = []
        
        for i in range(env.n_agents):
            agent = NFSPAgent(
                player=env.players[i],
                state_size=state_size,
                action_size=action_size,
                device=torch.device("cuda" if torch.cuda.is_available() else "cpu")
            )
            
            # 尝试加载模型
            model_path = os.path.join(model_dir) if os.path.isdir(model_dir) else model_dir
            success = agent.load_models(model_path)
            
            if not success:
                print(f"无法加载模型 {model_path} 跳过")
                continue
                
            nfsp_agents.append(agent)
        
        # 如果成功加载了所有智能体的模型
        if len(nfsp_agents) == env.n_agents:
            # 评估团队可利用度
            exploitability, avg_reward = nfsp_agents[0].evaluate_team_exploitability(env, nfsp_agents, num_episodes)
            
            # 保存结果
            model_name = os.path.basename(model_dir)
            results['model_names'].append(model_name)
            results['exploitability'].append(exploitability)
            results['avg_reward'].append(avg_reward)
            
            print(f"模型 {model_name} - 可利用度: {exploitability:.4f}, 平均奖励: {avg_reward:.4f}")
    
    return results

def plot_results(results, save_path):
    """绘制评估结果"""
    plt.figure(figsize=(15, 10))
    
    # 绘制可利用度曲线
    plt.subplot(2, 1, 1)
    plt.plot(results['exploitability'], 'r-o', label='可利用度')
    plt.xlabel('模型序号')
    plt.ylabel('可利用度')
    plt.title('NFSP团队可利用度随训练变化')
    plt.grid(True)
    plt.legend()
    
    # 添加模型名称作为x轴标签
    if len(results['model_names']) <= 10:
        plt.xticks(range(len(results['model_names'])), results['model_names'], rotation=45)
    
    # 绘制平均奖励曲线
    plt.subplot(2, 1, 2)
    plt.plot(results['avg_reward'], 'b-o', label='平均团队奖励')
    plt.xlabel('模型序号')
    plt.ylabel('平均奖励')
    plt.title('NFSP团队平均奖励随训练变化')
    plt.grid(True)
    plt.legend()
    
    # 添加模型名称作为x轴标签
    if len(results['model_names']) <= 10:
        plt.xticks(range(len(results['model_names'])), results['model_names'], rotation=45)
    
    plt.tight_layout()
    plt.savefig(save_path)
    plt.close()

def calculate_state_size(env):
    """计算状态空间大小"""
    obss, _ = env.reset()
    obs_shape = env.observation_space[0].shape[0]
    return obs_shape

def main(args):
    """主函数"""
    # 创建环境
    env = gym.make("Foraging-5x5-2p-1f-v3", render_mode=None)
    
    # 计算状态空间大小
    state_size = calculate_state_size(env)
    action_size = 6  # (NONE, NORTH, SOUTH, WEST, EAST, LOAD)
    
    print(f"状态大小: {state_size}, 动作大小: {action_size}")
    
    # 评估模型系列
    results = evaluate_model_series(
        env, 
        args.model_dir, 
        state_size, 
        action_size,
        num_episodes=args.episodes
    )
    
    # 创建结果目录
    os.makedirs("./results", exist_ok=True)
    
    # 绘制并保存结果
    plot_results(results, "./results/exploitability_analysis.png")
    
    # 保存数据为numpy文件
    np.savez("./results/exploitability_data.npz", 
             model_names=results['model_names'],
             exploitability=results['exploitability'],
             avg_reward=results['avg_reward'])
    
    print("\n评估完成！结果已保存到 ./results/ 目录")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="评估NFSP智能体团队的可利用度")
    parser.add_argument("--model_dir", type=str, default="./models", help="模型目录或父目录")
    parser.add_argument("--episodes", type=int, default=100, help="每个模型评估的回合数")
    
    args = parser.parse_args()
    main(args) 